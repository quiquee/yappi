cur_text
For more information about yappi, please refer to the Yappi Website [http://www.yappi.org]
For a somehoe less technical description of the Yappi protocol, please check [[YappiDIL|A day in the life of a Yappi! node]]
== YAPPI AGENTS ==

A Yappi agent is any artifact that uses the Yappi protocol to
publish or retrieve real time data using a Yappi Network.

A Yappi agent can be an application that runs as a window minimised
and shows the data as it arrives. For example, it can be an application
that displays results of the current matches played in the Champions League
and that updates results as they happen. 

This document describes the expected behaviour of a Yappi agent. Yappi agents
are nodes in the Yappi network. Nodes can act either as client or servers in their role of node. Any node can be promoted to supernode. For this reason all Yappi agents should implement all the protocols.

== High level workflow ==

When a Yappi agent starts it will first try to retrieve a list of Yappi nodes
that are accepting connections. These are Yappi supernodes which can be contacted
using standard Yappi ''network connection initialization protocol''.

The list of yappi nodes accepting connections is available online at the following
address: http://www.yappi.org/ynodes.xml . This list contains one entry per node, with its IP address y the port on which it listens for connections. 

Upon initialization the Yappi agent receives an unique NodeID. This node ID is different for each connection and unique in the network.

Once the agent has received a Node ID it can subscribe to a data update stream. Subscribing to Update streams is done by requesting it to one or several of the supernodes to which we are connected

A response to a search query is a list of nodes (IP + port ) currently distributing that data. The node that initiated the search will connect to one or several of those nodes by using IP address and port.

The control protocol is used for all those functions that are not linked to content distribution but to the organisation of the network and its topology. Control protocol is used only between a supernode and a node in the network. The control protocol is of no use to talk between network nodes.

A node in the network receives updates notifying of changes in the current supernode list by using the control protocol. 

Control protocol provides a way to promote a node to supernode. 

Control protocol is used to confirm availability (and state) of a node in the network and a list of content distributed by that node.

== Summary ==
* 'Initialization Protocol': Assign a node ID to a given node when joining the network and provide a initial list of available supermodes
* 'Search Protocol': allows discovery of content in the network
* 'Control Protocols': Between Supernode and nodes: Allows to distribute changes to SuperNode list, gather information about state and content distributed by nodes and promote a node to become a supernode.

* 'Data Protocol': Allows updates of content.

== NETWORK CONNECTION INITIALIZATION PROTOCOL (NCIP) ==

Happens whenever a Yappi agent starts. The purpose is to announce itself to the network
and gain knowledge about the possible servers to which it can connect. The Yappi agent will
then receive a NodeID. 

Client: GET /HELO message consisting of system name and list of YECs that this node is currently
distributing.
Server: RHELO message reply that contains:
* An Initial server list snapshot and the YEC that this server publishes with updates to the server list.
* A unique NodeID for this node.

The server will store in its own space the list of YECs for this client. This list maybe redistributed to 
other servers to optimize network.

== SEARCH PROTOCOL ==

Yappi nodes initiate a search by sending a search request to one or many of the servers
to which it is connected. A search request is done on the same port that a NCIP is done, but
this time things happen in a very d ifferent manner.

Searches are always done by YEC. Yappi agents have to know what is he YEC they want to connect and
the protocol doenst specify means for name search of content. This means that it is not Yappi! agents
responsibility to discover the content in the network.

The communication for search requests is an HTTP POST query to /SEARCH uri passing the YEC list as XML
data.
The reply is an HTTP 1.0 valid reply in XML format with a node list 

'Client': POST /SEARCH message containing the YEC or YECs that it wants to receive.
'Server': Replies with a NODE LIST that contains addresses and ports that are available to distribute each of the YECs 
that have been requested. 

The server will either find these in its local database or by propagating the search. A TTL will
be included in the message then, starting with SEARCH_TTL

== DATA CONNECTION INITIALIZATION PROTOCOL (DCIP) ==

Happens whenever a Yappi node wants to receive data from another node. This connection should
come as result of a search and always after data has been discovered in the network by its
corresponding YEC.

An exception to this is the case in which a node is connecting to a server to reveive updates
to the server list. In this case the connection is done not as result of a search but as
result of a network initialization.

Client: ASK message to the server and port with the YEC that it wants to receive
Server: a response with the port and a data connection token to which the client has to connect
to receive updates to this YEC. The connection token is a string that encrypts the client
IP address using a seed that is initialized on node startup. This is to avoid kidnaping of data
distribution slots. This is always needed for the first data connection, as further connections
will use the same distribution slot.

== DATA CONNECTION ==

it is done using the port and the token string that are passed as result of the data connection
initialization negotiation. This is done when we want to receive updates from a server to which we are not
currently connected. Updates from peers from wich we already receive data will happen using the existing DATA CONNECTION

Client: GET message using the token provided as part of te DCIP
Server: replies with UPDATE messages whenever they happen. UPDATE messages contains a header with the TIMESTAMP and the YEC of this data. Following the header comes the data for this entity using the syntax of this data type.

== SEARCH FORWARD PROTOCOL ==
Used to propagate requests for YECs. 

== SERVER LIST UPDATES STREAM ==

A data stream containing updates to the server list. As server lists are not unique and there may be as many as supernodes are in the network, this data stream is unique per supernode. The YEC will be the ID of teh server followed by the server list updates stream data type code: "YSLUP" . This is something like 12345.YSLUP

Only supernodes forward content on this YEC. A normal node is supposed to ignore requests for updates on this list. This is to avoid malicious nodes to flood the network with wrong supernodes information. 

== SOME RULES / OTHER POINTS ==

A server doesn't know if the node connecting to it is a server or not. This should be
completely transparent to the receiver of the connection.

Facilities for reverse connections are not implemented in the first version of the Yappi protocol but
it may be implemented later and only for data connections. A reverse connection
is a connection made from the node that sources data behind a firewall to the requester of data. In a normal
operating mode the requester of the data initiates the connection with the source of the data.

Yappi agents would
normally be delivered with a list of well known supernodes. Any supernode caches a 
list of the supernodes list.

About NodeIDs , generating, uniqueness, using SuperNode NodeID as encryption key, sharing NodeIDs between supernodes, routing issues (not needed unless we implement reverse connections) ... etc

Supernodes keep a map of all NodeID to IP address for the agents that are connected to them: updating , storing and searching.

== MESSAGE DATA FORMATS ==
=== Node List ===
Used to deliver a response to a /SEARCH query and used as well to provide a list of initial supernodes
 <yappiNodeList>
  <node servername="some.serverna.me" port="zzzzz" />
  <node servername="another.serverna.me" port="zzzzz" />
 </yappiNodeList>

=== YEC List ===
Used as query message for a /SEARCH query
 <list>
  <yec id="aaa.bbbbbbb"/>
  <yec id="aaa.bbbbbbb"/>
 </list>

=== Other formats ===
Need to define :

* 'data type definition' message : provides with a simple validation for the format of the data message
* 'data validation' message : validation rules for a given data type. It is a list of validation rules, self contained or interdependant
* possibly many others, write it down here ...
